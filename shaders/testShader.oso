OpenShadingLanguage 1.00
# Compiled by oslc 1.7.4.pixar38bde12
# options: 
shader testShader
param	color	_colU	0 0 0		%read{37,37} %write{2147483647,-1}
param	color	_colV	0 0 0		%read{37,37} %write{2147483647,-1}
oparam	color	o_col	0 0 0		%read{2147483647,-1} %write{37,37}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___311_r	%read{12,28} %write{8,8}
local	float	___311_sum	%read{16,16} %write{12,12}
local	float	___311_period	%read{19,27} %write{18,18}
local	float	___311_elipses	%read{35,35} %write{33,33}
local	point	eyeTransform	%read{2,10} %write{0,0}
local	float	blend	%read{37,37} %write{36,36}
const	float	$const1	0.050000001		%read{21,22} %write{2147483647,-1}
const	float	$const2	0.2		%read{18,18} %write{2147483647,-1}
const	float	$const3	0.1		%read{19,30} %write{2147483647,-1}
const	int	$const4	1		%read{3,10} %write{2147483647,-1}
const	float	$const5	1		%read{14,35} %write{2147483647,-1}
const	string	$const8	"eyezone"		%read{1,1} %write{2147483647,-1}
const	int	$const9	0		%read{2,9} %write{2147483647,-1}
temp	float	$tmp1	%read{5,5} %write{2,2}
temp	float	$tmp2	%read{6,6} %write{3,3}
const	string	$const10	"hypot"		%read{4,4} %write{2147483647,-1}
temp	float	$tmp3	%read{7,7} %write{5,5}
temp	float	$tmp4	%read{7,7} %write{6,6}
temp	float	$tmp5	%read{8,8} %write{7,7}
temp	float	$tmp6	%read{11,11} %write{9,9}
temp	float	$tmp7	%read{11,11} %write{10,10}
temp	float	$tmp8	%read{12,12} %write{11,11}
temp	float	$tmp9	%read{18,18} %write{17,17}
const	string	$const11	"lerp"		%read{13,13} %write{2147483647,-1}
temp	float	$tmp10	%read{15,15} %write{14,14}
temp	float	$tmp11	%read{17,17} %write{15,15}
temp	float	$tmp12	%read{17,17} %write{16,16}
temp	float	$tmp13	%read{33,33} %write{32,32}
temp	float	$tmp14	%read{22,31} %write{19,19}
const	string	$const12	"smoothpulsetraineven"		%read{20,20} %write{2147483647,-1}
temp	float	$tmp15	%read{30,30} %write{21,21}
temp	float	$tmp16	%read{31,31} %write{22,22}
const	string	$const13	"smoothpulsetrain"		%read{23,23} %write{2147483647,-1}
temp	float	$tmp17	%read{30,31} %write{28,28}
const	string	$const14	"mod"		%read{24,24} %write{2147483647,-1}
temp	float	$tmp18	%read{27,27} %write{26,26}
temp	float	$tmp19	%read{26,26} %write{25,25}
temp	float	$tmp20	%read{28,28} %write{27,27}
const	string	$const15	"smoothpulse"		%read{29,29} %write{2147483647,-1}
temp	float	$tmp21	%read{32,32} %write{30,30}
temp	float	$tmp22	%read{32,32} %write{31,31}
const	float	$const16	0		%read{36,36} %write{2147483647,-1}
const	string	$const17	"clamp"		%read{34,34} %write{2147483647,-1}
temp	float	$tmp23	%read{36,36} %write{35,35}
code ___main___
# testShader.osl:58
#     point eyeTransform = P ;
	assign		eyeTransform P 	%filename{"testShader.osl"} %line{58} %argrw{"wr"}
# testShader.osl:59
#     float blend = eyezone(eyeTransform, 0.05, 0.2, 0.1, 1, 2);
	functioncall	$const8 37 	%line{59} %argrw{"r"}
# testShader.osl:41
#     float r = hypot(pos[0],pos[1]);
	compref		$tmp1 eyeTransform $const9 	%line{41} %argrw{"wrr"}
	compref		$tmp2 eyeTransform $const4 	%argrw{"wrr"}
	functioncall	$const10 9 	%argrw{"r"}
# /opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h:113
#     vector name (vector x, float y) BUILTIN;    \
	mul		$tmp3 $tmp1 $tmp1 	%filename{"/opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h"} %line{113} %argrw{"wrr"}
	mul		$tmp4 $tmp2 $tmp2 	%argrw{"wrr"}
	add		$tmp5 $tmp3 $tmp4 	%argrw{"wrr"}
	sqrt		___311_r $tmp5 	%argrw{"wr"}
# testShader.osl:44
#     float sum = (pos[0] + pos[1]) / r;
	compref		$tmp6 eyeTransform $const9 	%filename{"testShader.osl"} %line{44} %argrw{"wrr"}
	compref		$tmp7 eyeTransform $const4 	%argrw{"wrr"}
	add		$tmp8 $tmp6 $tmp7 	%argrw{"wrr"}
	div		___311_sum $tmp8 ___311_r 	%argrw{"wrr"}
# testShader.osl:46
#     float period = gap * lerp(1, sum, warp);
	functioncall	$const11 18 	%line{46} %argrw{"r"}
# testShader.osl:17
#   return (1 - t) * x + t * y;
	sub		$tmp10 $const5 $const5 	%line{17} %argrw{"wrr"}
	mul		$tmp11 $tmp10 $const5 	%argrw{"wrr"}
	mul		$tmp12 $const5 ___311_sum 	%argrw{"wrr"}
	add		$tmp9 $tmp11 $tmp12 	%argrw{"wrr"}
# testShader.osl:46
#     float period = gap * lerp(1, sum, warp);
	mul		___311_period $const2 $tmp9 	%line{46} %argrw{"wrr"}
# testShader.osl:48
#     float elipses = 1 - smoothpulsetraineven(thickness, thickness + period, fuzz, period, r);
	add		$tmp14 $const3 ___311_period 	%line{48} %argrw{"wrr"}
	functioncall	$const12 33 	%argrw{"r"}
# testShader.osl:35
#     return smoothpulsetrain(e0-fuzz, e0, e1, e1+fuzz, period, x);
	sub		$tmp15 $const3 $const1 	%line{35} %argrw{"wrr"}
	add		$tmp16 $tmp14 $const1 	%argrw{"wrr"}
	functioncall	$const13 33 	%argrw{"r"}
# testShader.osl:29
#     return smoothpulse(e0, e1, e2, e3, mod(x,period));
	functioncall	$const14 29 	%line{29} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h:135
# color  log (color a,  float b) { return log(a)/log(b); }
	div		$tmp19 ___311_r ___311_period 	%filename{"/opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp18 $tmp19 	%argrw{"wr"}
	mul		$tmp20 ___311_period $tmp18 	%argrw{"wrr"}
	sub		$tmp17 ___311_r $tmp20 	%argrw{"wrr"}
# testShader.osl:29
#     return smoothpulse(e0, e1, e2, e3, mod(x,period));
	functioncall	$const15 33 	%filename{"testShader.osl"} %line{29} %argrw{"r"}
# testShader.osl:23
#     return smoothstep(e0,e1,x) - smoothstep(e2,e3,x);
	smoothstep	$tmp21 $tmp15 $const3 $tmp17 	%line{23} %argrw{"wrrr"}
	smoothstep	$tmp22 $tmp14 $tmp16 $tmp17 	%argrw{"wrrr"}
	sub		$tmp13 $tmp21 $tmp22 	%argrw{"wrr"}
# testShader.osl:48
#     float elipses = 1 - smoothpulsetraineven(thickness, thickness + period, fuzz, period, r);
	sub		___311_elipses $const5 $tmp13 	%line{48} %argrw{"wrr"}
# testShader.osl:49
#     return clamp(elipses,0,1);
	functioncall	$const17 37 	%line{49} %argrw{"r"}
# /opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h:144
# PERCOMP2 (atan2)
	min		$tmp23 ___311_elipses $const5 	%filename{"/opt/pixar/RenderManProServer-21.5/lib/osl/include/stdosl.h"} %line{144} %argrw{"wrr"}
	max		blend $tmp23 $const16 	%argrw{"wrr"}
# testShader.osl:60
#     o_col = mix(_colU, _colV, blend);
	mix		o_col _colU _colV blend 	%filename{"testShader.osl"} %line{60} %argrw{"wrrr"}
	end
